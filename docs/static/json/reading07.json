{
    "q01": {
        "type": "single",
        "question": "<strong>\n\nTo solve the Dining Philosopher's problem, the book proposes the following\nsolution:\n\n</strong>\n",
        "responses": {
            "order": "Change the order in which the last philosopher acquires the forks.",
            "waiter": "Have a waiter direct which philosophers can eat.",
            "starve": "Just let some of the philosophers starve.",
            "rdrn": "Have philosophers eat in round-robin fashion.",
            "forks": "Buy more forks."
        }
    },
    "q02": {
        "type": "blank",
        "question": "<strong>\nTwo types of non-deadlock concurrency bugs are:\n</strong>\n\n<ol>\n\n<li><b>____</b>: These bugs occur when the assumption of atomicity is incorrect.</li>\n\n<li><b>____</b>: These bugs occur when the desired order of operations is\nnot enforced during execution.</li>\n\n</ol>\n"
    },
    "q03": {
        "type": "blank",
        "question": "<strong>\n\nDeadlock occurs when the following four conditions hold:\n\n</strong>\n\n<ol>\n\n<li><b>____</b>: There exists a circular chain of threads such that each\nthread holds one or more resources that are being requested by the next\nthread in the chain.</li>\n\n<li><b>____</b>: Resources cannot be forcibly removed from threads that are\nholding them.</li>\n\n<li><b>____</b>: Threads hold resources allocated to them while waiting for\nadditional resources.</li>\n\n<li><b>____</b>: Threads claim exclusive control of resources that they\nrequire.</li>\n\n</ol>\n"
    },
    "q04": {
        "type": "multiple",
        "question": "<strong>\n\nWhich of the following are ways to prevent deadlock (choose all that apply)?\n\n</strong>\n",
        "responses": {
            "ordering": "Provide some form of ordering to circumvent circular waiting.",
            "holding": "Make sure we always acquire locks one at a time.",
            "livelock": "Prefer methods that utilize livelock instead of deadlock.",
            "lockfree": "Avoid locks by using atomic hardware instructions."
        }
    },
    "q05": {
        "type": "blank",
        "question": "<strong>\n\nRather than prevent deadlock, we can instead try to avoid it by having a\nsmart ____ that will consider the dependencies between threads or by having a\nservice that ____ deadlock and provides ____ techniques.\n\n</strong>\n"
    },
    "q06": {
        "type": "blank",
        "question": "\n<p><strong>\n\nSuppose you and your friends are going to Salsa night hosted by our beloved\n<i>Ramzi</i>. You are willing to dance, but only after at least <tt>2</tt>\nof your friends have started dancing.\n\n</strong></p>\n\n<p>Model this <b>synchronization problem</b> using POSIX <b>threads</b>\nand <b>semaphores</b>.  Assume each person is represented as a\n<b>thread</b> that calls one of the corresponding functions below\n(<tt>you_dance()</tt> for yourself and <tt>friend_dance()</tt> for each of\nyour friends).</p>\n\n<p>Assuming the following global variables:</p>\n\n<pre>\nsize_t MIN_FRIENDS = 2  // Minimum number of friends dancing before you will dance\nsize_t Friends     = 0  // Number of friends dancing\n\nSemaphore Lock     = 1\nSemaphore Dancing  = 0\n</pre>\n\n<p>Select and order the following lines of code to implement each of the\nfunctions below:</p>\n\n<pre>\nA. sem_wait(Lock)\nB. sem_post(Lock)\nC. sem_wait(Dancing)\nD. sem_post(Dancing)\nE. Friends++\nF. Friends--\nG. if Friends >= MIN_FRIENDS\nH. if Friends < MIN_FRIENDS\n</pre>\n\n<p>\n<ol>\n<li>Select and order the lines of code above to implement the\n<tt>you_dance()</tt> function. ____</li>\n\n<li>Select and order the lines of code above to implement the\n<tt>friend_dance()</tt> function. ____</li>\n</ol>\n</p>\n\n<center>\n<p><b>Put a single space between each line of code (ie. \"A B C\")).</b></p>\n</center>\n"
    }
}
